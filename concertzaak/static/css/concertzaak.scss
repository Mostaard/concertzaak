@use 'vars';
@import "navigation";
@import "socials";

@font-face {
  font-family: lulo-one;
  src: url(../fonts/lulo-one.otf);
}

@font-face {
  font-family: lulo-one-bold;
  src: url(../fonts/lulo-one-bold.otf);
}

@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap');


* {
  margin: 0;
  padding: 0;
}

html {
  font-size: 10px;
}

body {
  background: vars.$background-color;
  margin: 0 auto;
  color: vars.$text-color;
  font-family: 'Roboto', sans-serif;
  overflow-x: hidden;
  min-height: 100vh;

}

a {
  text-decoration: none;
}

b {
  @include vars.highlighted;
}


footer {
  background: vars.$accent-color;
  position: absolute;
  top: 100%;
  width: 100%;
  color: black;
  font-size: 1.3em;
  font-family: vars.$fancy-font;
  padding-bottom: 4rem;
  display: flex;
  flex-direction: column;
  justify-content: center;

  ul {
    list-style-type: none;
  }

  .logo {
    display: block;
    width: 10em;
    margin: 0 auto;
    padding: 5em 0;

    img {
      display: block;
      width: 100%;
      height: auto;
    }
  }

  .contact {
    padding: 2rem;
    box-sizing: border-box;
    overflow-x: hidden;
    list-style-type: none;

    li {
      margin-bottom: .6em;

      span, i {
        margin-right: 1em;
      }


      &:first-of-type {
        font-size: 1.2em;
      }
    }


  }

  .navigation {
    padding: 2rem;
    font-size: 1.7em;
    font-family: vars.$fancy-font-bold;

    & > li {
      margin: .6em 0;
    }

    a {
      color: black;
    }

    .sub-menu {
      margin-left: 1em;
      margin-top: -.6em;
      font-size: 0.8em;
      font-family: vars.$fancy-font;

    }
  }

  .socials {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1em;
    padding: 2em 0;

    a {
      color: black;
    }
  }

}

h1, h2, h3 {
  font-family: vars.$fancy-font-bold;
}

h1 {
  margin: 3.5em 0 1.5em .25em;
  font-size: 2.5em;
  @include vars.highlighted;
}


@media screen and (min-width: map_get(vars.$screen-size, 's')) {


}

@media screen and (min-width: map_get(vars.$screen-size, 'm')) {
  h1 {
    margin-left: 3rem;
    font-size: 4rem;
  }

}

@media screen and (min-width: map_get(vars.$screen-size, 'l')) {
  footer {
    font-size: 1.5em;
    .container {
      display: flex;
      justify-content: space-evenly;
      align-items: center;
      flex-direction: row-reverse;
    }
  }
}

@media (min-width: map_get(vars.$screen-size, 'xl')) {
  html {
    font-size: 12px;
  }
}

// ANIMATIONS

$filters: (
        saturate: (
                units: '',
                range: (
                        min: 1,
                        max: 10
                ),
                probability: 1/5
        ),
        hue-rotate: (
                units: 'deg',
                probability: 1,
                range: (
                        min: 0,
                        max: 360
                ),
        ),
        invert: (
                units: '',
                probability: 1/30,
                range: (
                        min: 1,
                        max: 1
                ),
        ),
        contrast: (
                units: '',
                probability: 1/10,
                range: (
                        min: 1,
                        max: 10
                ),
        ),
        brightness: (
                units: '%',
                probability: 1/20,
                range: (
                        min: 25,
                        max: 75
                ),
        )
);

@keyframes spazz {
  @for $i from 0 through 100 {
    @if (random(100) < 66.6) {
      #{$i}% {
        $filter_css_value: '';
        @each $filter, $filter_props in $filters {
          @if ((random(100) / 100) < map-get($filter_props, probability)) {
            $range: map-get($filter_props, range);
            $min: map-get($range, min);
            $max: map-get($range, max);
            $filter_css_value: $filter_css_value + ' #{$filter}(#{random(100) / 100 * ($max - $min) + $min}#{map-get($filter_props, units)})';
          }
        }
        filter: unquote($filter_css_value);
        background-color: hsl(random(360), 100%, 70%);
        transform: translate(#{random(30) - 15}px, #{random(30) - 15}px) scale(random(20) / 100 + 1.05);
      }
    }
  }
}