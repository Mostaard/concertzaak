@use 'vars';
@import "navigation";

@font-face {
  font-family: lulo-one;
  src: url(../fonts/lulo-one.otf);
}

@font-face {
  font-family: lulo-one-bold;
  src: url(../fonts/lulo-one-bold.otf);
}

@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap');


* {
  margin: 0;
  padding: 0;
}

html {
  font-size: 10px;
}

body {
  background: vars.$background-color;
  margin: 0 auto;
  color: vars.$text-color;
  font-family: 'Roboto', sans-serif;
  overflow-x: hidden;
}

a {
  text-decoration: none;
}

b {
  @include vars.highlighted;
}


footer {
  background: vars.$accent-color;
}

h1, h2, h3 {
  font-family: vars.$fancy-font-bold;
}

h1 {
  margin: .6em 0 1.5em .25em;
  font-size: 2.5em;
  @include vars.highlighted;
}


@media screen and (min-width: map_get(vars.$screen-size, 's')) {


}

@media screen and (min-width: map_get(vars.$screen-size, 'm')) {

  h1 {
    margin-top: 3rem;
    margin-left: 3rem;
    font-size: 4rem;
  }
}

@media screen and (min-width: map_get(vars.$screen-size, 'l')) {
  html {
    //font-size: 8px;
  }

}

@media (min-width: map_get(vars.$screen-size, 'xl')) {
  html {
    font-size: 10px;
  }

}

// ANIMATIONS

$filters: (
        saturate: (
                units: '',
                range: (
                        min: 1,
                        max: 10
                ),
                probability: 1/5
        ),
        hue-rotate: (
                units: 'deg',
                probability: 1,
                range: (
                        min: 0,
                        max: 360
                ),
        ),
        invert: (
                units: '',
                probability: 1/30,
                range: (
                        min: 1,
                        max: 1
                ),
        ),
        contrast: (
                units: '',
                probability: 1/10,
                range: (
                        min: 1,
                        max: 10
                ),
        ),
        brightness: (
                units: '%',
                probability: 1/20,
                range: (
                        min: 25,
                        max: 75
                ),
        )
);

@keyframes spazz {
  @for $i from 0 through 100 {
    @if (random(100) < 66.6) {
      #{$i}% {
        $filter_css_value: '';
        @each $filter, $filter_props in $filters {
          @if ((random(100) / 100) < map-get($filter_props, probability)) {
            $range: map-get($filter_props, range);
            $min: map-get($range, min);
            $max: map-get($range, max);
            $filter_css_value: $filter_css_value + ' #{$filter}(#{random(100) / 100 * ($max - $min) + $min}#{map-get($filter_props, units)})';
          }
        }
        filter: unquote($filter_css_value);
        background-color: hsl(random(360), 100%, 70%);
        transform: translate(#{random(30) - 15}px, #{random(30) - 15}px) scale(random(20) / 100 + 1.05);
      }
    }
  }
}